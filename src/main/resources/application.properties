# IDENTITY (ContextIdApplicationContextInitializer)
spring.application.name=${project.artifactId}
spring.jmx.default-domain=${project.artifactId}
spring.profiles.active=${pom.profiles.active}

# 项目contextPath，一般在正式发布版本中，我们不配置
#server.servlet.context-path=/
# 错误页，指定发生错误时，跳转的URL。请查看BasicErrorController源码便知
server.error.path=/errors
# 空白错误页激活
server.error.whitelabel.enabled=true
# 是否包含错误堆栈，默认never，可配置always、on_trace_param
# 其中always为总是显示错误堆栈
# on_trace_param 只有当request的parameter包含trace=true的时候显示
server.error.include-stacktrace=on_trace_param
##################
# 是否启用HTTPS
##################
#server.ssl.keyAlias=hty
#server.ssl.key-store=classpath:keystore/hty.p12
#server.ssl.key-store-password=hengtianyi
#server.ssl.keyStoreType=PKCS12
# session最大超时时间(秒)，默认为1800秒（30分钟）
server.servlet.session.timeout=3600s
# session的cookie名，要设置不同，防止浏览器打开多个项目，session名相同
server.servlet.session.cookie.name=JSESSIONID_${project.artifactId}
# 设置cookie的HttpOnly标识（true - 通过js将无法读取到cookie信息）
server.servlet.session.cookie.http-only=false
# 单个文件上传大小
spring.servlet.multipart.max-file-size=5MB
# 设置总上传的数据大小
spring.servlet.multipart.max-request-size=10MB
# LOG
logging.config=classpath:log4j2.xml
# 使用CGLIB实现切面
spring.aop.proxy-target-class=true
# 资源映射路径为/static/**
spring.mvc.static-path-pattern=/static/**
# 资源映射地址
spring.resources.static-locations=classpath:/static/
############################################
# FREEMARKER (FreeMarkerAutoConfiguration)
############################################
# 设定模板的加载路径，多个以逗号分隔，默认: ["classpath:/templates/"]
spring.freemarker.template-loader-path=classpath:/templates/
# 指定HttpServletRequest的属性是否可以覆盖controller的model的同名项
spring.freemarker.allow-request-override=true
# 指定HttpSession的属性是否可以覆盖controller的model的同名项
spring.freemarker.allow-session-override=true
# 是否开启template caching
####################################线上记得将这个cache设置为true
spring.freemarker.cache=true
# 设定Template的编码
spring.freemarker.charset=UTF-8
# 是否检查templates路径是否存在
spring.freemarker.check-template-location=true
# 设定Content-Type
spring.freemarker.content-type=text/html
# 是否允许mvc使用freemarker
spring.freemarker.enabled=true
# 设定所有request的属性在merge到模板的时候，是否要都添加到model中
spring.freemarker.expose-request-attributes=true
# 设定所有HttpSession的属性在merge到模板的时候，是否要都添加到model中
spring.freemarker.expose-session-attributes=false
# 设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用
spring.freemarker.expose-spring-macro-helpers=true
# 是否优先从文件系统加载template，以支持热加载，默认为true
spring.freemarker.prefer-file-system-access=true
# 获取contextPath，使用方式${ctx.contextPath}
spring.freemarker.request-context-attribute=ctx
# 设定模板的后缀
spring.freemarker.suffix=.ftl
# 实时更新
spring.freemarker.settings.template_update_delay=3600
#spring.freemarker.settings.tag_syntax=auto_detect
spring.freemarker.settings.default_encoding=UTF-8
spring.freemarker.settings.output_encoding=UTF-8
spring.freemarker.settings.locale=zh_CN
spring.freemarker.settings.datetime_format=yyyy-MM-dd HH:mm:ss
#spring.freemarker.settings.date_format=yyyy-MM-dd
#spring.freemarker.settings.time_format=HH:mm:ss
spring.freemarker.settings.number_format=#
#spring.freemarker.settings.classic_compatible=true
##ignore,debug,html_debug,rethrow
# 忽略模板异常
spring.freemarker.settings.template_exception_handler=ignore
server.undertow.buffer-size=1024
server.undertow.direct-buffers=false
################################################################
# DataSource - druid
# https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter
# jdbc网址使用 spring.datasource.druid.url
################################################################
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 初始连接数
spring.datasource.druid.initial-size=1
#最大连接池数量。default=8+
spring.datasource.druid.max-active=5
# 获取连接时最大等待时间，单位毫秒。
# 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降。
# 如果需要可以通过配置useUnfairLock属性为true使用非公平锁
spring.datasource.druid.max-wait=60000
# 开启池的prepared statement池功能，PSCache对支持游标的数据库性能提升巨大
# 如果用Oracle, 则把poolPreparedStatements配置为true, mysql 5.5之后建议true
spring.datasource.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
# 在Druid中，会存在Oracle下PSCache占用内存过多的问题，可以把这个数据配置大一些，比如100。默认=-1
spring.datasource.druid.max-open-prepared-statements=100
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
# 如果validationQuery为null,testOnBorrow,testOnBorrow,testOnReturn,testWhileIdle都不会起作用。这个可以不配置
spring.datasource.druid.validation-query=select '1' from dual
# 单位:秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
# mysql实现的不是很合理，不建议在mysql下配置此参数
spring.datasource.druid.validation-query-timeout=1000
# 是否在从池中取出连接前进行检验。如果检验失败，则从池中去除连接并尝试取出另一个
# 注意: 设置为true后，validation-query参数必须设置
spring.datasource.druid.test-on-borrow=false
# 是否在归还连接池前进行检验
# 注意: 设置为true后，validation-query参数必须设置
spring.datasource.druid.test-on-return=false
# 建议配置为true,不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
# 执行validationQuery检测连接是否有效，validation-query参数必须设置。default=false
spring.datasource.druid.test-while-idle=true
# 连接池中的minIdle数据以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。default=false
spring.datasource.druid.keep-alive=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 default=1分钟
# 有两个含义：
# (1)Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接
# (2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明
#spring.datasource.druid.time-between-eviction-runs-millis=60000
#池中的连接保持空闲而不被驱逐的最小时间，单位是毫秒
#spring.datasource.druid.min-evictable-idle-time-millis=100000
#spring.datasource.druid.max-evictable-idle-time-millis=200000
#合并多个DruidDataSource的监控数据
spring.datasource.druid.use-global-data-source-stat=false
# 配置StatFilter
spring.datasource.druid.filter.stat.enabled=true
# 记录慢sql
spring.datasource.druid.filter.stat.log-slow-sql=true
# 慢sql时间
spring.datasource.druid.filter.stat.slow-sql-millis=2000
# 合并sql
spring.datasource.druid.filter.stat.merge-sql=true
spring.datasource.druid.filter.stat.connection-stack-trace-enable=false
# 配置LogFilter
spring.datasource.druid.filter.slf4j.enabled=true
# 配置WallFilter
spring.datasource.druid.filter.wall.enabled=true
# 是否允许删除
spring.datasource.druid.filter.wall.config.delete-allow=true
# 是否允许删除表
spring.datasource.druid.filter.wall.config.drop-table-allow=false
# 是否允许创建表
spring.datasource.druid.filter.wall.config.create-table-allow=false
# 是否允许修改表
spring.datasource.druid.filter.wall.config.alter-table-allow=false
# 是否允许截断表
spring.datasource.druid.filter.wall.config.truncate-allow=false
# 是否允许非基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
spring.datasource.druid.filter.wall.config.none-base-statement-allow=false
# 检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
spring.datasource.druid.filter.wall.config.update-where-none-check=true
# SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
spring.datasource.druid.filter.wall.config.select-into-outfile-allow=false
# 是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息
spring.datasource.druid.filter.wall.config.metadata-allow=true
# 对被认为是攻击的SQL进行LOG error输出
spring.datasource.druid.filter.wall.log-violation=true
# 对被认为是攻击的SQL抛出sql exception
spring.datasource.druid.filter.wall.throw-exception=true
# StatViewServlet监控配置，在不同环境的属性中进行配置
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.reset-enable=false
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=NgSg~3o!MJ#k9%C^A&X*O(S)m_S+T|4ze1MmL,D.X/0;5'E5JVcXjO
# 白名单，多个IP逗号分隔
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
# MyBatis-Spring-Boot-Starter 相关配置
############################################
mybatis.type-aliases-package=com.hengtianyi.dims.service.dao
mybatis.mapper-locations=classpath:/mapper/*Mapper.xml
mybatis.config-location=classpath:/config/mybatis-config.xml
############################################
